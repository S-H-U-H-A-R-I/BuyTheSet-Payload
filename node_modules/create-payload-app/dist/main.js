"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Main", {
    enumerable: true,
    get: function() {
        return Main;
    }
});
const _slugify = /*#__PURE__*/ _interop_require_default(require("@sindresorhus/slugify"));
const _arg = /*#__PURE__*/ _interop_require_default(require("arg"));
const _commandexists = /*#__PURE__*/ _interop_require_default(require("command-exists"));
const _createproject = require("./lib/create-project");
const _generatesecret = require("./lib/generate-secret");
const _parseprojectname = require("./lib/parse-project-name");
const _parsetemplate = require("./lib/parse-template");
const _selectdb = require("./lib/select-db");
const _templates = require("./lib/templates");
const _writeenvfile = require("./lib/write-env-file");
const _log = require("./utils/log");
const _messages = require("./utils/messages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class Main {
    args;
    constructor(){
        // @ts-expect-error bad typings
        this.args = (0, _arg.default)({
            '--db': String,
            '--help': Boolean,
            '--name': String,
            '--secret': String,
            '--template': String,
            // Package manager
            '--no-deps': Boolean,
            '--use-npm': Boolean,
            '--use-pnpm': Boolean,
            '--use-yarn': Boolean,
            // Flags
            '--beta': Boolean,
            '--dry-run': Boolean,
            // Aliases
            '-d': '--db',
            '-h': '--help',
            '-n': '--name',
            '-t': '--template'
        }, {
            permissive: true
        });
    }
    async init() {
        try {
            if (this.args['--help']) {
                console.log((0, _messages.helpMessage)());
                process.exit(0);
            }
            const templateArg = this.args['--template'];
            if (templateArg) {
                const valid = (0, _templates.validateTemplate)(templateArg);
                if (!valid) {
                    console.log((0, _messages.helpMessage)());
                    process.exit(1);
                }
            }
            console.log(_messages.welcomeMessage);
            const projectName = await (0, _parseprojectname.parseProjectName)(this.args);
            const validTemplates = (0, _templates.getValidTemplates)();
            const template = await (0, _parsetemplate.parseTemplate)(this.args, validTemplates);
            const projectDir = projectName === '.' ? process.cwd() : `./${(0, _slugify.default)(projectName)}`;
            const packageManager = await getPackageManager(this.args);
            if (template.type !== 'plugin') {
                const dbDetails = await (0, _selectdb.selectDb)(this.args, projectName);
                const payloadSecret = (0, _generatesecret.generateSecret)();
                if (!this.args['--dry-run']) {
                    await (0, _createproject.createProject)({
                        cliArgs: this.args,
                        dbDetails,
                        packageManager,
                        projectDir,
                        projectName,
                        template
                    });
                    await (0, _writeenvfile.writeEnvFile)({
                        databaseUri: dbDetails.dbUri,
                        payloadSecret,
                        projectDir,
                        template
                    });
                }
            } else {
                if (!this.args['--dry-run']) {
                    await (0, _createproject.createProject)({
                        cliArgs: this.args,
                        packageManager,
                        projectDir,
                        projectName,
                        template
                    });
                }
            }
            (0, _log.success)('Payload project successfully created');
            console.log((0, _messages.successMessage)(projectDir, packageManager));
        } catch (error) {
            console.log(error);
        }
    }
}
async function getPackageManager(args) {
    let packageManager = 'npm';
    if (args['--use-npm']) {
        packageManager = 'npm';
    } else if (args['--use-yarn']) {
        packageManager = 'yarn';
    } else if (args['--use-pnpm']) {
        packageManager = 'pnpm';
    } else {
        try {
            if (await (0, _commandexists.default)('yarn')) {
                packageManager = 'yarn';
            } else if (await (0, _commandexists.default)('pnpm')) {
                packageManager = 'pnpm';
            }
        } catch (error) {
            packageManager = 'npm';
        }
    }
    return packageManager;
}

//# sourceMappingURL=data:application/json;base64,