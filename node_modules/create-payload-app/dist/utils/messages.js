"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    welcomeMessage: function() {
        return welcomeMessage;
    },
    helpMessage: function() {
        return helpMessage;
    },
    successMessage: function() {
        return successMessage;
    }
});
const _chalk = /*#__PURE__*/ _interop_require_default(require("chalk"));
const _figures = /*#__PURE__*/ _interop_require_default(require("figures"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _terminallink = /*#__PURE__*/ _interop_require_default(require("terminal-link"));
const _templates = require("../lib/templates");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const header = (message)=>`${_chalk.default.yellow(_figures.default.star)} ${_chalk.default.bold(message)}`;
const welcomeMessage = (0, _chalk.default)`
  {green Welcome to Payload. Let's create a project! }
`;
const spacer = ' '.repeat(8);
function helpMessage() {
    const validTemplates = (0, _templates.getValidTemplates)();
    return (0, _chalk.default)`
  {bold USAGE}

      {dim $} {bold npx create-payload-app}
      {dim $} {bold npx create-payload-app} my-project
      {dim $} {bold npx create-payload-app} -n my-project -t blog

  {bold OPTIONS}

      -n     {underline my-payload-app}         Set project name
      -t     {underline template_name}          Choose specific template

        {dim Available templates: ${formatTemplates(validTemplates)}}

      --use-npm                     Use npm to install dependencies
      --use-yarn                    Use yarn to install dependencies
      --use-pnpm                    Use pnpm to install dependencies
      --no-deps                     Do not install any dependencies
      -h                            Show help
`;
}
function formatTemplates(templates) {
    return `\n\n${spacer}${templates.map((t)=>`${t.name}${' '.repeat(28 - t.name.length)}${t.description}`).join(`\n${spacer}`)}`;
}
function successMessage(projectDir, packageManager) {
    return `
  ${header('Launch Application:')}

    - cd ${projectDir}
    - ${packageManager === 'yarn' ? 'yarn' : 'npm run'} dev or follow directions in ${createTerminalLink('README.md', `file://${_path.default.resolve(projectDir, 'README.md')}`)}

  ${header('Documentation:')}

    - ${createTerminalLink('Getting Started', 'https://payloadcms.com/docs/getting-started/what-is-payload')}
    - ${createTerminalLink('Configuration', 'https://payloadcms.com/docs/configuration/overview')}

`;
}
// Create terminalLink with fallback for unsupported terminals
function createTerminalLink(text, url) {
    return (0, _terminallink.default)(text, url, {
        fallback: (text, url)=>`${text}: ${url}`
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9tZXNzYWdlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnXG5pbXBvcnQgZmlndXJlcyBmcm9tICdmaWd1cmVzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB0ZXJtaW5hbExpbmsgZnJvbSAndGVybWluYWwtbGluaydcblxuaW1wb3J0IHR5cGUgeyBQcm9qZWN0VGVtcGxhdGUgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHsgZ2V0VmFsaWRUZW1wbGF0ZXMgfSBmcm9tICcuLi9saWIvdGVtcGxhdGVzJ1xuXG5jb25zdCBoZWFkZXIgPSAobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nID0+IGAke2NoYWxrLnllbGxvdyhmaWd1cmVzLnN0YXIpfSAke2NoYWxrLmJvbGQobWVzc2FnZSl9YFxuXG5leHBvcnQgY29uc3Qgd2VsY29tZU1lc3NhZ2UgPSBjaGFsa2BcbiAge2dyZWVuIFdlbGNvbWUgdG8gUGF5bG9hZC4gTGV0J3MgY3JlYXRlIGEgcHJvamVjdCEgfVxuYFxuXG5jb25zdCBzcGFjZXIgPSAnICcucmVwZWF0KDgpXG5cbmV4cG9ydCBmdW5jdGlvbiBoZWxwTWVzc2FnZSgpOiBzdHJpbmcge1xuICBjb25zdCB2YWxpZFRlbXBsYXRlcyA9IGdldFZhbGlkVGVtcGxhdGVzKClcbiAgcmV0dXJuIGNoYWxrYFxuICB7Ym9sZCBVU0FHRX1cblxuICAgICAge2RpbSAkfSB7Ym9sZCBucHggY3JlYXRlLXBheWxvYWQtYXBwfVxuICAgICAge2RpbSAkfSB7Ym9sZCBucHggY3JlYXRlLXBheWxvYWQtYXBwfSBteS1wcm9qZWN0XG4gICAgICB7ZGltICR9IHtib2xkIG5weCBjcmVhdGUtcGF5bG9hZC1hcHB9IC1uIG15LXByb2plY3QgLXQgYmxvZ1xuXG4gIHtib2xkIE9QVElPTlN9XG5cbiAgICAgIC1uICAgICB7dW5kZXJsaW5lIG15LXBheWxvYWQtYXBwfSAgICAgICAgIFNldCBwcm9qZWN0IG5hbWVcbiAgICAgIC10ICAgICB7dW5kZXJsaW5lIHRlbXBsYXRlX25hbWV9ICAgICAgICAgIENob29zZSBzcGVjaWZpYyB0ZW1wbGF0ZVxuXG4gICAgICAgIHtkaW0gQXZhaWxhYmxlIHRlbXBsYXRlczogJHtmb3JtYXRUZW1wbGF0ZXModmFsaWRUZW1wbGF0ZXMpfX1cblxuICAgICAgLS11c2UtbnBtICAgICAgICAgICAgICAgICAgICAgVXNlIG5wbSB0byBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICAgICAgLS11c2UteWFybiAgICAgICAgICAgICAgICAgICAgVXNlIHlhcm4gdG8gaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAgICAgIC0tdXNlLXBucG0gICAgICAgICAgICAgICAgICAgIFVzZSBwbnBtIHRvIGluc3RhbGwgZGVwZW5kZW5jaWVzXG4gICAgICAtLW5vLWRlcHMgICAgICAgICAgICAgICAgICAgICBEbyBub3QgaW5zdGFsbCBhbnkgZGVwZW5kZW5jaWVzXG4gICAgICAtaCAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IGhlbHBcbmBcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGVtcGxhdGVzKHRlbXBsYXRlczogUHJvamVjdFRlbXBsYXRlW10pIHtcbiAgcmV0dXJuIGBcXG5cXG4ke3NwYWNlcn0ke3RlbXBsYXRlc1xuICAgIC5tYXAoKHQpID0+IGAke3QubmFtZX0keycgJy5yZXBlYXQoMjggLSB0Lm5hbWUubGVuZ3RoKX0ke3QuZGVzY3JpcHRpb259YClcbiAgICAuam9pbihgXFxuJHtzcGFjZXJ9YCl9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VjY2Vzc01lc3NhZ2UocHJvamVjdERpcjogc3RyaW5nLCBwYWNrYWdlTWFuYWdlcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgJHtoZWFkZXIoJ0xhdW5jaCBBcHBsaWNhdGlvbjonKX1cblxuICAgIC0gY2QgJHtwcm9qZWN0RGlyfVxuICAgIC0gJHtcbiAgICAgIHBhY2thZ2VNYW5hZ2VyID09PSAneWFybicgPyAneWFybicgOiAnbnBtIHJ1bidcbiAgICB9IGRldiBvciBmb2xsb3cgZGlyZWN0aW9ucyBpbiAke2NyZWF0ZVRlcm1pbmFsTGluayhcbiAgICAgICdSRUFETUUubWQnLFxuICAgICAgYGZpbGU6Ly8ke3BhdGgucmVzb2x2ZShwcm9qZWN0RGlyLCAnUkVBRE1FLm1kJyl9YCxcbiAgICApfVxuXG4gICR7aGVhZGVyKCdEb2N1bWVudGF0aW9uOicpfVxuXG4gICAgLSAke2NyZWF0ZVRlcm1pbmFsTGluayhcbiAgICAgICdHZXR0aW5nIFN0YXJ0ZWQnLFxuICAgICAgJ2h0dHBzOi8vcGF5bG9hZGNtcy5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvd2hhdC1pcy1wYXlsb2FkJyxcbiAgICApfVxuICAgIC0gJHtjcmVhdGVUZXJtaW5hbExpbmsoJ0NvbmZpZ3VyYXRpb24nLCAnaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2NvbmZpZ3VyYXRpb24vb3ZlcnZpZXcnKX1cblxuYFxufVxuXG4vLyBDcmVhdGUgdGVybWluYWxMaW5rIHdpdGggZmFsbGJhY2sgZm9yIHVuc3VwcG9ydGVkIHRlcm1pbmFsc1xuZnVuY3Rpb24gY3JlYXRlVGVybWluYWxMaW5rKHRleHQ6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHRlcm1pbmFsTGluayh0ZXh0LCB1cmwsIHtcbiAgICBmYWxsYmFjazogKHRleHQsIHVybCkgPT4gYCR7dGV4dH06ICR7dXJsfWAsXG4gIH0pXG59XG4iXSwibmFtZXMiOlsid2VsY29tZU1lc3NhZ2UiLCJoZWxwTWVzc2FnZSIsInN1Y2Nlc3NNZXNzYWdlIiwiaGVhZGVyIiwibWVzc2FnZSIsImNoYWxrIiwieWVsbG93IiwiZmlndXJlcyIsInN0YXIiLCJib2xkIiwic3BhY2VyIiwicmVwZWF0IiwidmFsaWRUZW1wbGF0ZXMiLCJnZXRWYWxpZFRlbXBsYXRlcyIsImZvcm1hdFRlbXBsYXRlcyIsInRlbXBsYXRlcyIsIm1hcCIsInQiLCJuYW1lIiwibGVuZ3RoIiwiZGVzY3JpcHRpb24iLCJqb2luIiwicHJvamVjdERpciIsInBhY2thZ2VNYW5hZ2VyIiwiY3JlYXRlVGVybWluYWxMaW5rIiwicGF0aCIsInJlc29sdmUiLCJ0ZXh0IiwidXJsIiwidGVybWluYWxMaW5rIiwiZmFsbGJhY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBV2FBLGNBQWM7ZUFBZEE7O0lBTUdDLFdBQVc7ZUFBWEE7O0lBOEJBQyxjQUFjO2VBQWRBOzs7OERBL0NFO2dFQUNFOzZEQUNIO3FFQUNROzJCQUlTOzs7Ozs7QUFFbEMsTUFBTUMsU0FBUyxDQUFDQyxVQUE0QixDQUFDLEVBQUVDLGNBQUssQ0FBQ0MsTUFBTSxDQUFDQyxnQkFBTyxDQUFDQyxJQUFJLEVBQUUsQ0FBQyxFQUFFSCxjQUFLLENBQUNJLElBQUksQ0FBQ0wsU0FBUyxDQUFDO0FBRTNGLE1BQU1KLGlCQUFpQkssSUFBQUEsY0FBSyxDQUFBLENBQUM7O0FBRXBDLENBQUM7QUFFRCxNQUFNSyxTQUFTLElBQUlDLE1BQU0sQ0FBQztBQUVuQixTQUFTVjtJQUNkLE1BQU1XLGlCQUFpQkMsSUFBQUEsNEJBQWlCO0lBQ3hDLE9BQU9SLElBQUFBLGNBQUssQ0FBQSxDQUFDOzs7Ozs7Ozs7Ozs7a0NBWW1CLEVBQUVTLGdCQUFnQkYsZ0JBQWdCOzs7Ozs7O0FBT3BFLENBQUM7QUFDRDtBQUVBLFNBQVNFLGdCQUFnQkMsU0FBNEI7SUFDbkQsT0FBTyxDQUFDLElBQUksRUFBRUwsT0FBTyxFQUFFSyxVQUNwQkMsR0FBRyxDQUFDLENBQUNDLElBQU0sQ0FBQyxFQUFFQSxFQUFFQyxJQUFJLENBQUMsRUFBRSxJQUFJUCxNQUFNLENBQUMsS0FBS00sRUFBRUMsSUFBSSxDQUFDQyxNQUFNLEVBQUUsRUFBRUYsRUFBRUcsV0FBVyxDQUFDLENBQUMsRUFDdkVDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRVgsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxQjtBQUVPLFNBQVNSLGVBQWVvQixVQUFrQixFQUFFQyxjQUFzQjtJQUN2RSxPQUFPLENBQUM7RUFDUixFQUFFcEIsT0FBTyx1QkFBdUI7O1NBRXpCLEVBQUVtQixXQUFXO01BQ2hCLEVBQ0FDLG1CQUFtQixTQUFTLFNBQVMsVUFDdEMsNkJBQTZCLEVBQUVDLG1CQUM5QixhQUNBLENBQUMsT0FBTyxFQUFFQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0osWUFBWSxhQUFhLENBQUMsRUFDakQ7O0VBRUosRUFBRW5CLE9BQU8sa0JBQWtCOztNQUV2QixFQUFFcUIsbUJBQ0YsbUJBQ0EsK0RBQ0E7TUFDQSxFQUFFQSxtQkFBbUIsaUJBQWlCLHNEQUFzRDs7QUFFbEcsQ0FBQztBQUNEO0FBRUEsOERBQThEO0FBQzlELFNBQVNBLG1CQUFtQkcsSUFBWSxFQUFFQyxHQUFXO0lBQ25ELE9BQU9DLElBQUFBLHFCQUFZLEVBQUNGLE1BQU1DLEtBQUs7UUFDN0JFLFVBQVUsQ0FBQ0gsTUFBTUMsTUFBUSxDQUFDLEVBQUVELEtBQUssRUFBRSxFQUFFQyxJQUFJLENBQUM7SUFDNUM7QUFDRiJ9