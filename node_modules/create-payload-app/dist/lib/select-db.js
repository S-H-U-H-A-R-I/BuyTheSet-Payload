"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "selectDb", {
    enumerable: true,
    get: function() {
        return selectDb;
    }
});
const _slugify = /*#__PURE__*/ _interop_require_default(require("@sindresorhus/slugify"));
const _prompts = /*#__PURE__*/ _interop_require_default(require("prompts"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const dbChoiceRecord = {
    mongodb: {
        dbConnectionPrefix: 'mongodb://127.0.0.1/',
        title: 'MongoDB',
        value: 'mongodb'
    },
    postgres: {
        dbConnectionPrefix: 'postgres://127.0.0.1:5432/',
        title: 'PostgreSQL (beta)',
        value: 'postgres'
    }
};
async function selectDb(args, projectName) {
    let dbType = undefined;
    if (args['--db']) {
        if (!Object.values(dbChoiceRecord).some((dbChoice)=>dbChoice.value === args['--db'])) {
            throw new Error(`Invalid database type given. Valid types are: ${Object.values(dbChoiceRecord).map((dbChoice)=>dbChoice.value).join(', ')}`);
        }
        dbType = args['--db'];
    } else {
        const dbTypeRes = await (0, _prompts.default)({
            name: 'value',
            choices: Object.values(dbChoiceRecord).map((dbChoice)=>{
                return {
                    title: dbChoice.title,
                    value: dbChoice.value
                };
            }),
            message: 'Select a database',
            type: 'select',
            validate: (value)=>!!value.length
        }, {
            onCancel: ()=>{
                process.exit(0);
            }
        });
        dbType = dbTypeRes.value;
    }
    const dbChoice = dbChoiceRecord[dbType];
    const dbUriRes = await (0, _prompts.default)({
        name: 'value',
        initial: `${dbChoice.dbConnectionPrefix}${projectName === '.' ? `payload-${getRandomDigitSuffix()}` : (0, _slugify.default)(projectName)}`,
        message: `Enter ${dbChoice.title.split(' ')[0]} connection string`,
        type: 'text',
        validate: (value)=>!!value.length
    }, {
        onCancel: ()=>{
            process.exit(0);
        }
    });
    return {
        dbUri: dbUriRes.value,
        type: dbChoice.value
    };
}
function getRandomDigitSuffix() {
    return (Math.random() * Math.pow(10, 6)).toFixed(0);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvc2VsZWN0LWRiLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzbHVnaWZ5IGZyb20gJ0BzaW5kcmVzb3JodXMvc2x1Z2lmeSdcbmltcG9ydCBwcm9tcHRzIGZyb20gJ3Byb21wdHMnXG5cbmltcG9ydCB0eXBlIHsgQ2xpQXJncywgRGJEZXRhaWxzLCBEYlR5cGUgfSBmcm9tICcuLi90eXBlcydcblxudHlwZSBEYkNob2ljZSA9IHtcbiAgZGJDb25uZWN0aW9uUHJlZml4OiBgJHtzdHJpbmd9L2BcbiAgdGl0bGU6IHN0cmluZ1xuICB2YWx1ZTogRGJUeXBlXG59XG5cbmNvbnN0IGRiQ2hvaWNlUmVjb3JkOiBSZWNvcmQ8RGJUeXBlLCBEYkNob2ljZT4gPSB7XG4gIG1vbmdvZGI6IHtcbiAgICBkYkNvbm5lY3Rpb25QcmVmaXg6ICdtb25nb2RiOi8vMTI3LjAuMC4xLycsXG4gICAgdGl0bGU6ICdNb25nb0RCJyxcbiAgICB2YWx1ZTogJ21vbmdvZGInLFxuICB9LFxuICBwb3N0Z3Jlczoge1xuICAgIGRiQ29ubmVjdGlvblByZWZpeDogJ3Bvc3RncmVzOi8vMTI3LjAuMC4xOjU0MzIvJyxcbiAgICB0aXRsZTogJ1Bvc3RncmVTUUwgKGJldGEpJyxcbiAgICB2YWx1ZTogJ3Bvc3RncmVzJyxcbiAgfSxcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbGVjdERiKGFyZ3M6IENsaUFyZ3MsIHByb2plY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPERiRGV0YWlscz4ge1xuICBsZXQgZGJUeXBlOiBEYlR5cGUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgaWYgKGFyZ3NbJy0tZGInXSkge1xuICAgIGlmICghT2JqZWN0LnZhbHVlcyhkYkNob2ljZVJlY29yZCkuc29tZSgoZGJDaG9pY2UpID0+IGRiQ2hvaWNlLnZhbHVlID09PSBhcmdzWyctLWRiJ10pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGRhdGFiYXNlIHR5cGUgZ2l2ZW4uIFZhbGlkIHR5cGVzIGFyZTogJHtPYmplY3QudmFsdWVzKGRiQ2hvaWNlUmVjb3JkKVxuICAgICAgICAgIC5tYXAoKGRiQ2hvaWNlKSA9PiBkYkNob2ljZS52YWx1ZSlcbiAgICAgICAgICAuam9pbignLCAnKX1gLFxuICAgICAgKVxuICAgIH1cbiAgICBkYlR5cGUgPSBhcmdzWyctLWRiJ10gYXMgRGJUeXBlXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGJUeXBlUmVzID0gYXdhaXQgcHJvbXB0cyhcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3ZhbHVlJyxcbiAgICAgICAgY2hvaWNlczogT2JqZWN0LnZhbHVlcyhkYkNob2ljZVJlY29yZCkubWFwKChkYkNob2ljZSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZTogZGJDaG9pY2UudGl0bGUsXG4gICAgICAgICAgICB2YWx1ZTogZGJDaG9pY2UudmFsdWUsXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgbWVzc2FnZTogJ1NlbGVjdCBhIGRhdGFiYXNlJyxcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIHZhbGlkYXRlOiAodmFsdWU6IHN0cmluZykgPT4gISF2YWx1ZS5sZW5ndGgsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApXG4gICAgZGJUeXBlID0gZGJUeXBlUmVzLnZhbHVlXG4gIH1cblxuICBjb25zdCBkYkNob2ljZSA9IGRiQ2hvaWNlUmVjb3JkW2RiVHlwZV1cblxuICBjb25zdCBkYlVyaVJlcyA9IGF3YWl0IHByb21wdHMoXG4gICAge1xuICAgICAgbmFtZTogJ3ZhbHVlJyxcbiAgICAgIGluaXRpYWw6IGAke2RiQ2hvaWNlLmRiQ29ubmVjdGlvblByZWZpeH0ke1xuICAgICAgICBwcm9qZWN0TmFtZSA9PT0gJy4nID8gYHBheWxvYWQtJHtnZXRSYW5kb21EaWdpdFN1ZmZpeCgpfWAgOiBzbHVnaWZ5KHByb2plY3ROYW1lKVxuICAgICAgfWAsXG4gICAgICBtZXNzYWdlOiBgRW50ZXIgJHtkYkNob2ljZS50aXRsZS5zcGxpdCgnICcpWzBdfSBjb25uZWN0aW9uIHN0cmluZ2AsIC8vIHN0cmlwIGJldGEgZnJvbSB0aXRsZVxuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsaWRhdGU6ICh2YWx1ZTogc3RyaW5nKSA9PiAhIXZhbHVlLmxlbmd0aCxcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgICAgfSxcbiAgICB9LFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBkYlVyaTogZGJVcmlSZXMudmFsdWUsXG4gICAgdHlwZTogZGJDaG9pY2UudmFsdWUsXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmFuZG9tRGlnaXRTdWZmaXgoKTogc3RyaW5nIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTAsIDYpKS50b0ZpeGVkKDApXG59XG4iXSwibmFtZXMiOlsic2VsZWN0RGIiLCJkYkNob2ljZVJlY29yZCIsIm1vbmdvZGIiLCJkYkNvbm5lY3Rpb25QcmVmaXgiLCJ0aXRsZSIsInZhbHVlIiwicG9zdGdyZXMiLCJhcmdzIiwicHJvamVjdE5hbWUiLCJkYlR5cGUiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzb21lIiwiZGJDaG9pY2UiLCJFcnJvciIsIm1hcCIsImpvaW4iLCJkYlR5cGVSZXMiLCJwcm9tcHRzIiwibmFtZSIsImNob2ljZXMiLCJtZXNzYWdlIiwidHlwZSIsInZhbGlkYXRlIiwibGVuZ3RoIiwib25DYW5jZWwiLCJwcm9jZXNzIiwiZXhpdCIsImRiVXJpUmVzIiwiaW5pdGlhbCIsImdldFJhbmRvbURpZ2l0U3VmZml4Iiwic2x1Z2lmeSIsInNwbGl0IiwiZGJVcmkiLCJNYXRoIiwicmFuZG9tIiwicG93IiwidG9GaXhlZCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF3QnNCQTs7O2VBQUFBOzs7Z0VBeEJGO2dFQUNBOzs7Ozs7QUFVcEIsTUFBTUMsaUJBQTJDO0lBQy9DQyxTQUFTO1FBQ1BDLG9CQUFvQjtRQUNwQkMsT0FBTztRQUNQQyxPQUFPO0lBQ1Q7SUFDQUMsVUFBVTtRQUNSSCxvQkFBb0I7UUFDcEJDLE9BQU87UUFDUEMsT0FBTztJQUNUO0FBQ0Y7QUFFTyxlQUFlTCxTQUFTTyxJQUFhLEVBQUVDLFdBQW1CO0lBQy9ELElBQUlDLFNBQTZCQztJQUNqQyxJQUFJSCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0ksT0FBT0MsTUFBTSxDQUFDWCxnQkFBZ0JZLElBQUksQ0FBQyxDQUFDQyxXQUFhQSxTQUFTVCxLQUFLLEtBQUtFLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDdEYsTUFBTSxJQUFJUSxNQUNSLENBQUMsOENBQThDLEVBQUVKLE9BQU9DLE1BQU0sQ0FBQ1gsZ0JBQzVEZSxHQUFHLENBQUMsQ0FBQ0YsV0FBYUEsU0FBU1QsS0FBSyxFQUNoQ1ksSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVuQjtRQUNBUixTQUFTRixJQUFJLENBQUMsT0FBTztJQUN2QixPQUFPO1FBQ0wsTUFBTVcsWUFBWSxNQUFNQyxJQUFBQSxnQkFBTyxFQUM3QjtZQUNFQyxNQUFNO1lBQ05DLFNBQVNWLE9BQU9DLE1BQU0sQ0FBQ1gsZ0JBQWdCZSxHQUFHLENBQUMsQ0FBQ0Y7Z0JBQzFDLE9BQU87b0JBQ0xWLE9BQU9VLFNBQVNWLEtBQUs7b0JBQ3JCQyxPQUFPUyxTQUFTVCxLQUFLO2dCQUN2QjtZQUNGO1lBQ0FpQixTQUFTO1lBQ1RDLE1BQU07WUFDTkMsVUFBVSxDQUFDbkIsUUFBa0IsQ0FBQyxDQUFDQSxNQUFNb0IsTUFBTTtRQUM3QyxHQUNBO1lBQ0VDLFVBQVU7Z0JBQ1JDLFFBQVFDLElBQUksQ0FBQztZQUNmO1FBQ0Y7UUFFRm5CLFNBQVNTLFVBQVViLEtBQUs7SUFDMUI7SUFFQSxNQUFNUyxXQUFXYixjQUFjLENBQUNRLE9BQU87SUFFdkMsTUFBTW9CLFdBQVcsTUFBTVYsSUFBQUEsZ0JBQU8sRUFDNUI7UUFDRUMsTUFBTTtRQUNOVSxTQUFTLENBQUMsRUFBRWhCLFNBQVNYLGtCQUFrQixDQUFDLEVBQ3RDSyxnQkFBZ0IsTUFBTSxDQUFDLFFBQVEsRUFBRXVCLHVCQUF1QixDQUFDLEdBQUdDLElBQUFBLGdCQUFPLEVBQUN4QixhQUNyRSxDQUFDO1FBQ0ZjLFNBQVMsQ0FBQyxNQUFNLEVBQUVSLFNBQVNWLEtBQUssQ0FBQzZCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xFVixNQUFNO1FBQ05DLFVBQVUsQ0FBQ25CLFFBQWtCLENBQUMsQ0FBQ0EsTUFBTW9CLE1BQU07SUFDN0MsR0FDQTtRQUNFQyxVQUFVO1lBQ1JDLFFBQVFDLElBQUksQ0FBQztRQUNmO0lBQ0Y7SUFHRixPQUFPO1FBQ0xNLE9BQU9MLFNBQVN4QixLQUFLO1FBQ3JCa0IsTUFBTVQsU0FBU1QsS0FBSztJQUN0QjtBQUNGO0FBRUEsU0FBUzBCO0lBQ1AsT0FBTyxBQUFDSSxDQUFBQSxLQUFLQyxNQUFNLEtBQUtELEtBQUtFLEdBQUcsQ0FBQyxJQUFJLEVBQUMsRUFBR0MsT0FBTyxDQUFDO0FBQ25EIn0=