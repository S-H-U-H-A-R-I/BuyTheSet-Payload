"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _fsextra = /*#__PURE__*/ _interop_require_default(require("fs-extra"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _createproject = require("./create-project");
const _packages = require("./packages");
const _templates = require("./templates");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const projectDir = _path.default.resolve(__dirname, './tmp');
describe('createProject', ()=>{
    beforeAll(()=>{
        console.log = jest.fn();
    });
    beforeEach(()=>{
        if (_fsextra.default.existsSync(projectDir)) {
            _fsextra.default.rmdirSync(projectDir, {
                recursive: true
            });
        }
    });
    afterEach(()=>{
        if (_fsextra.default.existsSync(projectDir)) {
            _fsextra.default.rmSync(projectDir, {
                recursive: true
            });
        }
    });
    describe('#createProject', ()=>{
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        const args = {
            _: [
                'project-name'
            ],
            '--db': 'mongodb',
            '--no-deps': true
        };
        const packageManager = 'yarn';
        it('creates starter project', async ()=>{
            const projectName = 'starter-project';
            const template = {
                name: 'blank',
                type: 'starter',
                url: 'https://github.com/payloadcms/payload/templates/blank',
                description: 'Blank Template'
            };
            await (0, _createproject.createProject)({
                cliArgs: args,
                projectName,
                projectDir,
                template,
                packageManager
            });
            const packageJsonPath = _path.default.resolve(projectDir, 'package.json');
            const packageJson = _fsextra.default.readJsonSync(packageJsonPath);
            // Check package name and description
            expect(packageJson.name).toEqual(projectName);
        });
        it('creates plugin template', async ()=>{
            const projectName = 'plugin';
            const template = {
                name: 'plugin',
                type: 'plugin',
                url: 'https://github.com/payloadcms/payload-plugin-template',
                description: 'Template for creating a Payload plugin'
            };
            await (0, _createproject.createProject)({
                cliArgs: args,
                projectName,
                projectDir,
                template,
                packageManager
            });
            const packageJsonPath = _path.default.resolve(projectDir, 'package.json');
            const packageJson = _fsextra.default.readJsonSync(packageJsonPath);
            // Check package name and description
            expect(packageJson.name).toEqual(projectName);
        });
        describe('db adapters and bundlers', ()=>{
            const templates = (0, _templates.getValidTemplates)();
            it.each([
                [
                    'blank',
                    'mongodb',
                    'webpack'
                ],
                [
                    'blank',
                    'postgres',
                    'webpack'
                ],
                [
                    'website',
                    'mongodb',
                    'webpack'
                ],
                [
                    'website',
                    'postgres',
                    'webpack'
                ],
                [
                    'ecommerce',
                    'mongodb',
                    'webpack'
                ],
                [
                    'ecommerce',
                    'postgres',
                    'webpack'
                ]
            ])('update config and deps: %s, %s, %s', async (templateName, db, bundler)=>{
                const projectName = 'starter-project';
                const template = templates.find((t)=>t.name === templateName);
                await (0, _createproject.createProject)({
                    cliArgs: args,
                    projectName,
                    projectDir,
                    template,
                    packageManager,
                    dbDetails: {
                        dbUri: `${db}://localhost:27017/create-project-test`,
                        type: db
                    }
                });
                const dbReplacement = _packages.dbPackages[db];
                const bundlerReplacement = _packages.bundlerPackages[bundler];
                const editorReplacement = _packages.editorPackages['slate'];
                const packageJsonPath = _path.default.resolve(projectDir, 'package.json');
                const packageJson = _fsextra.default.readJsonSync(packageJsonPath);
                // Check deps
                expect(packageJson.dependencies['payload']).toEqual('^2.0.0');
                expect(packageJson.dependencies[dbReplacement.packageName]).toEqual(dbReplacement.version);
                // Should only have one db adapter
                expect(Object.keys(packageJson.dependencies).filter((n)=>n.startsWith('@payloadcms/db-'))).toHaveLength(1);
                expect(packageJson.dependencies[bundlerReplacement.packageName]).toEqual(bundlerReplacement.version);
                expect(packageJson.dependencies[editorReplacement.packageName]).toEqual(editorReplacement.version);
                let payloadConfigPath = _path.default.resolve(projectDir, 'src/payload.config.ts');
                // Website and ecommerce templates have payload.config.ts in src/payload
                if (!_fsextra.default.existsSync(payloadConfigPath)) {
                    payloadConfigPath = _path.default.resolve(projectDir, 'src/payload/payload.config.ts');
                }
                const content = _fsextra.default.readFileSync(payloadConfigPath, 'utf-8');
                // Check payload.config.ts
                expect(content).not.toContain('// database-adapter-import');
                expect(content).toContain(dbReplacement.importReplacement);
                expect(content).not.toContain('// database-adapter-config-start');
                expect(content).not.toContain('// database-adapter-config-end');
                expect(content).toContain(dbReplacement.configReplacement.join('\n'));
                expect(content).not.toContain('// bundler-config-import');
                expect(content).toContain(bundlerReplacement.importReplacement);
                expect(content).not.toContain('// bundler-config');
                expect(content).toContain(bundlerReplacement.configReplacement);
            });
        });
    });
    describe('Templates', ()=>{
        it.todo('Verify that all templates are valid');
    // Loop through all templates.ts that should have replacement comments, and verify that they are present
    });
});

//# sourceMappingURL=data:application/json;base64,