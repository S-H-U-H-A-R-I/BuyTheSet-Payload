"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "configurePayloadConfig", {
    enumerable: true,
    get: function() {
        return configurePayloadConfig;
    }
});
const _fsextra = /*#__PURE__*/ _interop_require_default(require("fs-extra"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _log = require("../utils/log");
const _packages = require("./packages");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function configurePayloadConfig(args) {
    if (!args.dbDetails) {
        return;
    }
    // Update package.json
    const packageJsonPath = _path.default.resolve(args.projectDir, 'package.json');
    try {
        const packageObj = await _fsextra.default.readJson(packageJsonPath);
        packageObj.dependencies['payload'] = '^2.0.0';
        const dbPackage = _packages.dbPackages[args.dbDetails.type];
        const bundlerPackage = _packages.bundlerPackages['webpack'];
        const editorPackage = _packages.editorPackages['slate'];
        // Delete all other db adapters
        Object.values(_packages.dbPackages).forEach((p)=>{
            if (p.packageName !== dbPackage.packageName) {
                delete packageObj.dependencies[p.packageName];
            }
        });
        packageObj.dependencies[dbPackage.packageName] = dbPackage.version;
        packageObj.dependencies[bundlerPackage.packageName] = bundlerPackage.version;
        packageObj.dependencies[editorPackage.packageName] = editorPackage.version;
        await _fsextra.default.writeJson(packageJsonPath, packageObj, {
            spaces: 2
        });
    } catch (err) {
        (0, _log.warning)('Unable to update name in package.json');
    }
    try {
        const possiblePaths = [
            _path.default.resolve(args.projectDir, 'src/payload.config.ts'),
            _path.default.resolve(args.projectDir, 'src/payload/payload.config.ts')
        ];
        let payloadConfigPath;
        possiblePaths.forEach((p)=>{
            if (_fsextra.default.pathExistsSync(p) && !payloadConfigPath) {
                payloadConfigPath = p;
            }
        });
        if (!payloadConfigPath) {
            (0, _log.warning)('Unable to update payload.config.ts with plugins');
            return;
        }
        const configContent = _fsextra.default.readFileSync(payloadConfigPath, 'utf-8');
        const configLines = configContent.split('\n');
        const dbReplacement = _packages.dbPackages[args.dbDetails.type];
        const bundlerReplacement = _packages.bundlerPackages['webpack'];
        const editorReplacement = _packages.editorPackages['slate'];
        let dbConfigStartLineIndex;
        let dbConfigEndLineIndex;
        configLines.forEach((l, i)=>{
            if (l.includes('// database-adapter-import')) {
                configLines[i] = dbReplacement.importReplacement;
            }
            if (l.includes('// bundler-import')) {
                configLines[i] = bundlerReplacement.importReplacement;
            }
            if (l.includes('// bundler-config')) {
                configLines[i] = bundlerReplacement.configReplacement;
            }
            if (l.includes('// editor-import')) {
                configLines[i] = editorReplacement.importReplacement;
            }
            if (l.includes('// editor-config')) {
                configLines[i] = editorReplacement.configReplacement;
            }
            if (l.includes('// database-adapter-config-start')) {
                dbConfigStartLineIndex = i;
            }
            if (l.includes('// database-adapter-config-end')) {
                dbConfigEndLineIndex = i;
            }
        });
        if (!dbConfigStartLineIndex || !dbConfigEndLineIndex) {
            (0, _log.warning)('Unable to update payload.config.ts with database adapter import');
        } else {
            // Replaces lines between `// database-adapter-config-start` and `// database-adapter-config-end`
            configLines.splice(dbConfigStartLineIndex, dbConfigEndLineIndex - dbConfigStartLineIndex + 1, ...dbReplacement.configReplacement);
        }
        _fsextra.default.writeFileSync(payloadConfigPath, configLines.join('\n'));
    } catch (err) {
        (0, _log.warning)('Unable to update payload.config.ts with plugins');
    }
}

//# sourceMappingURL=data:application/json;base64,