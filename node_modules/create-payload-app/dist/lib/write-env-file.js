"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "writeEnvFile", {
    enumerable: true,
    get: function() {
        return writeEnvFile;
    }
});
const _fsextra = /*#__PURE__*/ _interop_require_default(require("fs-extra"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _log = require("../utils/log");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function writeEnvFile(args) {
    const { databaseUri, payloadSecret, projectDir, template } = args;
    try {
        if (template.type === 'starter' && _fsextra.default.existsSync(_path.default.join(projectDir, '.env.example'))) {
            // Parse .env file into key/value pairs
            const envFile = await _fsextra.default.readFile(_path.default.join(projectDir, '.env.example'), 'utf8');
            const envWithValues = envFile.split('\n').filter((e)=>e).map((line)=>{
                if (line.startsWith('#') || !line.includes('=')) return line;
                const split = line.split('=');
                const key = split[0];
                let value = split[1];
                if (key === 'MONGODB_URI' || key === 'MONGO_URL' || key === 'DATABASE_URI') {
                    value = databaseUri;
                }
                if (key === 'PAYLOAD_SECRET' || key === 'PAYLOAD_SECRET_KEY') {
                    value = payloadSecret;
                }
                return `${key}=${value}`;
            });
            // Write new .env file
            await _fsextra.default.writeFile(_path.default.join(projectDir, '.env'), envWithValues.join('\n'));
        } else {
            const content = `MONGODB_URI=${databaseUri}\nPAYLOAD_SECRET=${payloadSecret}`;
            await _fsextra.default.outputFile(`${projectDir}/.env`, content);
        }
        (0, _log.success)('.env file created');
    } catch (err) {
        (0, _log.error)('Unable to write .env file');
        if (err instanceof Error) {
            (0, _log.error)(err.message);
        }
        process.exit(1);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGUtZW52LWZpbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuaW1wb3J0IHR5cGUgeyBQcm9qZWN0VGVtcGxhdGUgfSBmcm9tICcuLi90eXBlcydcblxuaW1wb3J0IHsgZXJyb3IsIHN1Y2Nlc3MgfSBmcm9tICcuLi91dGlscy9sb2cnXG5cbi8qKiBQYXJzZSBhbmQgc3dhcCAuZW52LmV4YW1wbGUgdmFsdWVzIGFuZCB3cml0ZSAuZW52ICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd3JpdGVFbnZGaWxlKGFyZ3M6IHtcbiAgZGF0YWJhc2VVcmk6IHN0cmluZ1xuICBwYXlsb2FkU2VjcmV0OiBzdHJpbmdcbiAgcHJvamVjdERpcjogc3RyaW5nXG4gIHRlbXBsYXRlOiBQcm9qZWN0VGVtcGxhdGVcbn0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBkYXRhYmFzZVVyaSwgcGF5bG9hZFNlY3JldCwgcHJvamVjdERpciwgdGVtcGxhdGUgfSA9IGFyZ3NcbiAgdHJ5IHtcbiAgICBpZiAodGVtcGxhdGUudHlwZSA9PT0gJ3N0YXJ0ZXInICYmIGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHByb2plY3REaXIsICcuZW52LmV4YW1wbGUnKSkpIHtcbiAgICAgIC8vIFBhcnNlIC5lbnYgZmlsZSBpbnRvIGtleS92YWx1ZSBwYWlyc1xuICAgICAgY29uc3QgZW52RmlsZSA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGguam9pbihwcm9qZWN0RGlyLCAnLmVudi5leGFtcGxlJyksICd1dGY4JylcbiAgICAgIGNvbnN0IGVudldpdGhWYWx1ZXM6IHN0cmluZ1tdID0gZW52RmlsZVxuICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUpXG4gICAgICAgIC5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKCcjJykgfHwgIWxpbmUuaW5jbHVkZXMoJz0nKSkgcmV0dXJuIGxpbmVcblxuICAgICAgICAgIGNvbnN0IHNwbGl0ID0gbGluZS5zcGxpdCgnPScpXG4gICAgICAgICAgY29uc3Qga2V5ID0gc3BsaXRbMF1cbiAgICAgICAgICBsZXQgdmFsdWUgPSBzcGxpdFsxXVxuXG4gICAgICAgICAgaWYgKGtleSA9PT0gJ01PTkdPREJfVVJJJyB8fCBrZXkgPT09ICdNT05HT19VUkwnIHx8IGtleSA9PT0gJ0RBVEFCQVNFX1VSSScpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZGF0YWJhc2VVcmlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ1BBWUxPQURfU0VDUkVUJyB8fCBrZXkgPT09ICdQQVlMT0FEX1NFQ1JFVF9LRVknKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHBheWxvYWRTZWNyZXRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYCR7a2V5fT0ke3ZhbHVlfWBcbiAgICAgICAgfSlcblxuICAgICAgLy8gV3JpdGUgbmV3IC5lbnYgZmlsZVxuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGguam9pbihwcm9qZWN0RGlyLCAnLmVudicpLCBlbnZXaXRoVmFsdWVzLmpvaW4oJ1xcbicpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gYE1PTkdPREJfVVJJPSR7ZGF0YWJhc2VVcml9XFxuUEFZTE9BRF9TRUNSRVQ9JHtwYXlsb2FkU2VjcmV0fWBcbiAgICAgIGF3YWl0IGZzLm91dHB1dEZpbGUoYCR7cHJvamVjdERpcn0vLmVudmAsIGNvbnRlbnQpXG4gICAgfVxuXG4gICAgc3VjY2VzcygnLmVudiBmaWxlIGNyZWF0ZWQnKVxuICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICBlcnJvcignVW5hYmxlIHRvIHdyaXRlIC5lbnYgZmlsZScpXG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBlcnJvcihlcnIubWVzc2FnZSlcbiAgICB9XG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ3cml0ZUVudkZpbGUiLCJhcmdzIiwiZGF0YWJhc2VVcmkiLCJwYXlsb2FkU2VjcmV0IiwicHJvamVjdERpciIsInRlbXBsYXRlIiwidHlwZSIsImZzIiwiZXhpc3RzU3luYyIsInBhdGgiLCJqb2luIiwiZW52RmlsZSIsInJlYWRGaWxlIiwiZW52V2l0aFZhbHVlcyIsInNwbGl0IiwiZmlsdGVyIiwiZSIsIm1hcCIsImxpbmUiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJrZXkiLCJ2YWx1ZSIsIndyaXRlRmlsZSIsImNvbnRlbnQiLCJvdXRwdXRGaWxlIiwic3VjY2VzcyIsImVyciIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwicHJvY2VzcyIsImV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7K0JBUXNCQTs7O2VBQUFBOzs7Z0VBUlA7NkRBQ0U7cUJBSWM7Ozs7OztBQUd4QixlQUFlQSxhQUFhQyxJQUtsQztJQUNDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUVDLFVBQVUsRUFBRUMsUUFBUSxFQUFFLEdBQUdKO0lBQzdELElBQUk7UUFDRixJQUFJSSxTQUFTQyxJQUFJLEtBQUssYUFBYUMsZ0JBQUUsQ0FBQ0MsVUFBVSxDQUFDQyxhQUFJLENBQUNDLElBQUksQ0FBQ04sWUFBWSxrQkFBa0I7WUFDdkYsdUNBQXVDO1lBQ3ZDLE1BQU1PLFVBQVUsTUFBTUosZ0JBQUUsQ0FBQ0ssUUFBUSxDQUFDSCxhQUFJLENBQUNDLElBQUksQ0FBQ04sWUFBWSxpQkFBaUI7WUFDekUsTUFBTVMsZ0JBQTBCRixRQUM3QkcsS0FBSyxDQUFDLE1BQ05DLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQSxHQUNkQyxHQUFHLENBQUMsQ0FBQ0M7Z0JBQ0osSUFBSUEsS0FBS0MsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsS0FBS0UsUUFBUSxDQUFDLE1BQU0sT0FBT0Y7Z0JBRXhELE1BQU1KLFFBQVFJLEtBQUtKLEtBQUssQ0FBQztnQkFDekIsTUFBTU8sTUFBTVAsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUlRLFFBQVFSLEtBQUssQ0FBQyxFQUFFO2dCQUVwQixJQUFJTyxRQUFRLGlCQUFpQkEsUUFBUSxlQUFlQSxRQUFRLGdCQUFnQjtvQkFDMUVDLFFBQVFwQjtnQkFDVjtnQkFDQSxJQUFJbUIsUUFBUSxvQkFBb0JBLFFBQVEsc0JBQXNCO29CQUM1REMsUUFBUW5CO2dCQUNWO2dCQUVBLE9BQU8sQ0FBQyxFQUFFa0IsSUFBSSxDQUFDLEVBQUVDLE1BQU0sQ0FBQztZQUMxQjtZQUVGLHNCQUFzQjtZQUN0QixNQUFNZixnQkFBRSxDQUFDZ0IsU0FBUyxDQUFDZCxhQUFJLENBQUNDLElBQUksQ0FBQ04sWUFBWSxTQUFTUyxjQUFjSCxJQUFJLENBQUM7UUFDdkUsT0FBTztZQUNMLE1BQU1jLFVBQVUsQ0FBQyxZQUFZLEVBQUV0QixZQUFZLGlCQUFpQixFQUFFQyxjQUFjLENBQUM7WUFDN0UsTUFBTUksZ0JBQUUsQ0FBQ2tCLFVBQVUsQ0FBQyxDQUFDLEVBQUVyQixXQUFXLEtBQUssQ0FBQyxFQUFFb0I7UUFDNUM7UUFFQUUsSUFBQUEsWUFBTyxFQUFDO0lBQ1YsRUFBRSxPQUFPQyxLQUFjO1FBQ3JCQyxJQUFBQSxVQUFLLEVBQUM7UUFDTixJQUFJRCxlQUFlRSxPQUFPO1lBQ3hCRCxJQUFBQSxVQUFLLEVBQUNELElBQUlHLE9BQU87UUFDbkI7UUFDQUMsUUFBUUMsSUFBSSxDQUFDO0lBQ2Y7QUFDRiJ9