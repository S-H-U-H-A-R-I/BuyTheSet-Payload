"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dbPackages: function() {
        return dbPackages;
    },
    bundlerPackages: function() {
        return bundlerPackages;
    },
    editorPackages: function() {
        return editorPackages;
    }
});
const mongodbReplacement = {
    importReplacement: "import { mongooseAdapter } from '@payloadcms/db-mongodb'",
    packageName: '@payloadcms/db-mongodb',
    // Replacement between `// database-adapter-config-start` and `// database-adapter-config-end`
    configReplacement: [
        '  db: mongooseAdapter({',
        '    url: process.env.DATABASE_URI,',
        '  }),'
    ],
    version: '^1.0.0'
};
const postgresReplacement = {
    configReplacement: [
        '  db: postgresAdapter({',
        '    pool: {',
        '      connectionString: process.env.DATABASE_URI,',
        '    },',
        '  }),'
    ],
    importReplacement: "import { postgresAdapter } from '@payloadcms/db-postgres'",
    packageName: '@payloadcms/db-postgres',
    version: '^0.x'
};
const dbPackages = {
    mongodb: mongodbReplacement,
    postgres: postgresReplacement
};
const webpackReplacement = {
    importReplacement: "import { webpackBundler } from '@payloadcms/bundler-webpack'",
    packageName: '@payloadcms/bundler-webpack',
    // Replacement of line containing `// bundler-config`
    configReplacement: '    bundler: webpackBundler(),',
    version: '^1.0.0'
};
const viteReplacement = {
    configReplacement: '  bundler: viteBundler(),',
    importReplacement: "import { viteBundler } from '@payloadcms/bundler-vite'",
    packageName: '@payloadcms/bundler-vite',
    version: '^0.x'
};
const bundlerPackages = {
    vite: viteReplacement,
    webpack: webpackReplacement
};
const editorPackages = {
    lexical: {
        configReplacement: '  editor: lexicalEditor({}),',
        importReplacement: "import { lexicalEditor } from '@payloadcms/richtext-lexical'",
        packageName: '@payloadcms/richtext-lexical',
        version: '^0.x'
    },
    slate: {
        configReplacement: '  editor: slateEditor({}),',
        importReplacement: "import { slateEditor } from '@payloadcms/richtext-slate'",
        packageName: '@payloadcms/richtext-slate',
        version: '^1.0.0'
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFja2FnZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCdW5kbGVyVHlwZSwgRGJUeXBlLCBFZGl0b3JUeXBlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbnR5cGUgRGJBZGFwdGVyUmVwbGFjZW1lbnQgPSB7XG4gIGNvbmZpZ1JlcGxhY2VtZW50OiBzdHJpbmdbXVxuICBpbXBvcnRSZXBsYWNlbWVudDogc3RyaW5nXG4gIHBhY2thZ2VOYW1lOiBzdHJpbmdcbiAgdmVyc2lvbjogc3RyaW5nXG59XG5cbnR5cGUgQnVuZGxlclJlcGxhY2VtZW50ID0ge1xuICBjb25maWdSZXBsYWNlbWVudDogc3RyaW5nXG4gIGltcG9ydFJlcGxhY2VtZW50OiBzdHJpbmdcbiAgcGFja2FnZU5hbWU6IHN0cmluZ1xuICB2ZXJzaW9uOiBzdHJpbmdcbn1cblxudHlwZSBFZGl0b3JSZXBsYWNlbWVudCA9IHtcbiAgY29uZmlnUmVwbGFjZW1lbnQ6IHN0cmluZ1xuICBpbXBvcnRSZXBsYWNlbWVudDogc3RyaW5nXG4gIHBhY2thZ2VOYW1lOiBzdHJpbmdcbiAgdmVyc2lvbjogc3RyaW5nXG59XG5cbmNvbnN0IG1vbmdvZGJSZXBsYWNlbWVudDogRGJBZGFwdGVyUmVwbGFjZW1lbnQgPSB7XG4gIGltcG9ydFJlcGxhY2VtZW50OiBcImltcG9ydCB7IG1vbmdvb3NlQWRhcHRlciB9IGZyb20gJ0BwYXlsb2FkY21zL2RiLW1vbmdvZGInXCIsXG4gIHBhY2thZ2VOYW1lOiAnQHBheWxvYWRjbXMvZGItbW9uZ29kYicsXG4gIC8vIFJlcGxhY2VtZW50IGJldHdlZW4gYC8vIGRhdGFiYXNlLWFkYXB0ZXItY29uZmlnLXN0YXJ0YCBhbmQgYC8vIGRhdGFiYXNlLWFkYXB0ZXItY29uZmlnLWVuZGBcbiAgY29uZmlnUmVwbGFjZW1lbnQ6IFsnICBkYjogbW9uZ29vc2VBZGFwdGVyKHsnLCAnICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJJLCcsICcgIH0pLCddLFxuICB2ZXJzaW9uOiAnXjEuMC4wJyxcbn1cblxuY29uc3QgcG9zdGdyZXNSZXBsYWNlbWVudDogRGJBZGFwdGVyUmVwbGFjZW1lbnQgPSB7XG4gIGNvbmZpZ1JlcGxhY2VtZW50OiBbXG4gICAgJyAgZGI6IHBvc3RncmVzQWRhcHRlcih7JyxcbiAgICAnICAgIHBvb2w6IHsnLFxuICAgICcgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkksJyxcbiAgICAnICAgIH0sJyxcbiAgICAnICB9KSwnLFxuICBdLFxuICBpbXBvcnRSZXBsYWNlbWVudDogXCJpbXBvcnQgeyBwb3N0Z3Jlc0FkYXB0ZXIgfSBmcm9tICdAcGF5bG9hZGNtcy9kYi1wb3N0Z3JlcydcIixcbiAgcGFja2FnZU5hbWU6ICdAcGF5bG9hZGNtcy9kYi1wb3N0Z3JlcycsXG4gIHZlcnNpb246ICdeMC54JywgLy8gdXAgdG8sIG5vdCBpbmNsdWRpbmcgMS4wLjBcbn1cblxuZXhwb3J0IGNvbnN0IGRiUGFja2FnZXM6IFJlY29yZDxEYlR5cGUsIERiQWRhcHRlclJlcGxhY2VtZW50PiA9IHtcbiAgbW9uZ29kYjogbW9uZ29kYlJlcGxhY2VtZW50LFxuICBwb3N0Z3JlczogcG9zdGdyZXNSZXBsYWNlbWVudCxcbn1cblxuY29uc3Qgd2VicGFja1JlcGxhY2VtZW50OiBCdW5kbGVyUmVwbGFjZW1lbnQgPSB7XG4gIGltcG9ydFJlcGxhY2VtZW50OiBcImltcG9ydCB7IHdlYnBhY2tCdW5kbGVyIH0gZnJvbSAnQHBheWxvYWRjbXMvYnVuZGxlci13ZWJwYWNrJ1wiLFxuICBwYWNrYWdlTmFtZTogJ0BwYXlsb2FkY21zL2J1bmRsZXItd2VicGFjaycsXG4gIC8vIFJlcGxhY2VtZW50IG9mIGxpbmUgY29udGFpbmluZyBgLy8gYnVuZGxlci1jb25maWdgXG4gIGNvbmZpZ1JlcGxhY2VtZW50OiAnICAgIGJ1bmRsZXI6IHdlYnBhY2tCdW5kbGVyKCksJyxcbiAgdmVyc2lvbjogJ14xLjAuMCcsXG59XG5cbmNvbnN0IHZpdGVSZXBsYWNlbWVudDogQnVuZGxlclJlcGxhY2VtZW50ID0ge1xuICBjb25maWdSZXBsYWNlbWVudDogJyAgYnVuZGxlcjogdml0ZUJ1bmRsZXIoKSwnLFxuICBpbXBvcnRSZXBsYWNlbWVudDogXCJpbXBvcnQgeyB2aXRlQnVuZGxlciB9IGZyb20gJ0BwYXlsb2FkY21zL2J1bmRsZXItdml0ZSdcIixcbiAgcGFja2FnZU5hbWU6ICdAcGF5bG9hZGNtcy9idW5kbGVyLXZpdGUnLFxuICB2ZXJzaW9uOiAnXjAueCcsIC8vIHVwIHRvLCBub3QgaW5jbHVkaW5nIDEuMC4wXG59XG5cbmV4cG9ydCBjb25zdCBidW5kbGVyUGFja2FnZXM6IFJlY29yZDxCdW5kbGVyVHlwZSwgQnVuZGxlclJlcGxhY2VtZW50PiA9IHtcbiAgdml0ZTogdml0ZVJlcGxhY2VtZW50LFxuICB3ZWJwYWNrOiB3ZWJwYWNrUmVwbGFjZW1lbnQsXG59XG5cbmV4cG9ydCBjb25zdCBlZGl0b3JQYWNrYWdlczogUmVjb3JkPEVkaXRvclR5cGUsIEVkaXRvclJlcGxhY2VtZW50PiA9IHtcbiAgbGV4aWNhbDoge1xuICAgIGNvbmZpZ1JlcGxhY2VtZW50OiAnICBlZGl0b3I6IGxleGljYWxFZGl0b3Ioe30pLCcsXG4gICAgaW1wb3J0UmVwbGFjZW1lbnQ6IFwiaW1wb3J0IHsgbGV4aWNhbEVkaXRvciB9IGZyb20gJ0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwnXCIsXG4gICAgcGFja2FnZU5hbWU6ICdAcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsJyxcbiAgICB2ZXJzaW9uOiAnXjAueCcsIC8vIHVwIHRvLCBub3QgaW5jbHVkaW5nIDEuMC4wXG4gIH0sXG4gIHNsYXRlOiB7XG4gICAgY29uZmlnUmVwbGFjZW1lbnQ6ICcgIGVkaXRvcjogc2xhdGVFZGl0b3Ioe30pLCcsXG4gICAgaW1wb3J0UmVwbGFjZW1lbnQ6IFwiaW1wb3J0IHsgc2xhdGVFZGl0b3IgfSBmcm9tICdAcGF5bG9hZGNtcy9yaWNodGV4dC1zbGF0ZSdcIixcbiAgICBwYWNrYWdlTmFtZTogJ0BwYXlsb2FkY21zL3JpY2h0ZXh0LXNsYXRlJyxcbiAgICB2ZXJzaW9uOiAnXjEuMC4wJyxcbiAgfSxcbn1cbiJdLCJuYW1lcyI6WyJkYlBhY2thZ2VzIiwiYnVuZGxlclBhY2thZ2VzIiwiZWRpdG9yUGFja2FnZXMiLCJtb25nb2RiUmVwbGFjZW1lbnQiLCJpbXBvcnRSZXBsYWNlbWVudCIsInBhY2thZ2VOYW1lIiwiY29uZmlnUmVwbGFjZW1lbnQiLCJ2ZXJzaW9uIiwicG9zdGdyZXNSZXBsYWNlbWVudCIsIm1vbmdvZGIiLCJwb3N0Z3JlcyIsIndlYnBhY2tSZXBsYWNlbWVudCIsInZpdGVSZXBsYWNlbWVudCIsInZpdGUiLCJ3ZWJwYWNrIiwibGV4aWNhbCIsInNsYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTRDYUEsVUFBVTtlQUFWQTs7SUFvQkFDLGVBQWU7ZUFBZkE7O0lBS0FDLGNBQWM7ZUFBZEE7OztBQTlDYixNQUFNQyxxQkFBMkM7SUFDL0NDLG1CQUFtQjtJQUNuQkMsYUFBYTtJQUNiLDhGQUE4RjtJQUM5RkMsbUJBQW1CO1FBQUM7UUFBMkI7UUFBc0M7S0FBUTtJQUM3RkMsU0FBUztBQUNYO0FBRUEsTUFBTUMsc0JBQTRDO0lBQ2hERixtQkFBbUI7UUFDakI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0RGLG1CQUFtQjtJQUNuQkMsYUFBYTtJQUNiRSxTQUFTO0FBQ1g7QUFFTyxNQUFNUCxhQUFtRDtJQUM5RFMsU0FBU047SUFDVE8sVUFBVUY7QUFDWjtBQUVBLE1BQU1HLHFCQUF5QztJQUM3Q1AsbUJBQW1CO0lBQ25CQyxhQUFhO0lBQ2IscURBQXFEO0lBQ3JEQyxtQkFBbUI7SUFDbkJDLFNBQVM7QUFDWDtBQUVBLE1BQU1LLGtCQUFzQztJQUMxQ04sbUJBQW1CO0lBQ25CRixtQkFBbUI7SUFDbkJDLGFBQWE7SUFDYkUsU0FBUztBQUNYO0FBRU8sTUFBTU4sa0JBQTJEO0lBQ3RFWSxNQUFNRDtJQUNORSxTQUFTSDtBQUNYO0FBRU8sTUFBTVQsaUJBQXdEO0lBQ25FYSxTQUFTO1FBQ1BULG1CQUFtQjtRQUNuQkYsbUJBQW1CO1FBQ25CQyxhQUFhO1FBQ2JFLFNBQVM7SUFDWDtJQUNBUyxPQUFPO1FBQ0xWLG1CQUFtQjtRQUNuQkYsbUJBQW1CO1FBQ25CQyxhQUFhO1FBQ2JFLFNBQVM7SUFDWDtBQUNGIn0=